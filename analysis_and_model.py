import os
import streamlit as st
import pandas as pd
from clearml import Dataset, Task, Model
import joblib
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ .env
load_dotenv()

# –ö—ç—à–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ ClearML
@st.cache_data
def load_from_clearml():
    dataset = Dataset.get(
        dataset_project="Predictive Maintenance",
        dataset_name="Predictive Maintenance Dataset"
    )
    local_path = dataset.get_local_copy()
    file_path = os.path.join(local_path, "predictive_maintenance.csv")
    df = pd.read_csv(file_path)
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
def analysis_and_model_page():
    st.title("üîß –ê–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–µ–ª—å")

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ ClearML
    st.subheader("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    try:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ ClearML..."):
            df = load_from_clearml()
            st.success("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ ClearML")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        return
    
    st.write("üìå –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    st.dataframe(df.head())

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ CatBoost
    st.subheader(":gear: –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (CatBoost)")
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ (–µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é)
        task = Task.current_task() or Task.init(
            project_name="Predictive Maintenance",
            task_name="Load Models for Inference",
            task_type=Task.TaskTypes.inference
        )

        try:
            model_cat = Model(model_id="27871909cd884d18abead8cce9ba8e43")  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–æ–¥–µ–ª–∏ –ø–æ ID           
            local_cat_path = model_cat.get_local_copy()                     # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏            
            cat_model = joblib.load(local_cat_path)                         # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é joblib

            st.success("‚úÖ CatBoost –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CatBoost –º–æ–¥–µ–ª–∏: {e}")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CatBoost –º–æ–¥–µ–ª–∏: {e}")
        return
    
    st.markdown("""
    **Accuracy**: 0.9883  
    **F1-score (class 1)**: 0.79  
    **AUC**: 0.9768
    """)

    # 3. –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (XGBoost)
    st.subheader(":gear: –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (XGBoost)")
    try:
        model_xgb = Model(model_id="6efcaeca84a046ffbb2449f074a24b62")
        local_xgb_path = model_xgb.get_local_copy()
        xgb_model = joblib.load(local_xgb_path)

        st.success("‚úÖ XGBoost –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XGBoost –º–æ–¥–µ–ª–∏: {e}")
        return

    st.markdown("""
    **Accuracy**: 0.9837  
    **Macro F1**: 0.51  
    **ROC-AUC**: 0.9321
    """)

    # 4. –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    st.subheader(":crystal_ball: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

    # –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
    default_values = {
        "Type": 1,
        "Air temperature [K]": 300.0,
        "Process temperature [K]": 310.0,
        "Rotational speed [rpm]": 1200.0,
        "Torque [Nm]": 1.0,
        "Tool wear [min]": 1.0
    }

    with st.form("prediction_form"):
        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        type_ = st.number_input("Type", value=default_values["Type"])
        air_temp = st.number_input("Air temperature [K]", value=default_values["Air temperature [K]"])
        process_temp = st.number_input("Process temperature [K]", value=default_values["Process temperature [K]"])
        rot_speed = st.number_input("Rotational speed [rpm]", value=default_values["Rotational speed [rpm]"])
        torque = st.number_input("Torque [Nm]", value=default_values["Torque [Nm]"])
        tool_wear = st.number_input("Tool wear [min]", value=default_values["Tool wear [min]"])

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        submitted = st.form_submit_button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

    if submitted:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        full_input = pd.DataFrame([{
            "Type": type_,
            "Air temperature [K]": air_temp,
            "Process temperature [K]": process_temp,
            "Rotational speed [rpm]": rot_speed,
            "Torque [Nm]": torque,
            "Tool wear [min]": tool_wear
        }])

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–µ–π
        input_cat = full_input.rename(columns={
            "Air temperature [K]": "Air_temperature_K",
            "Process temperature [K]": "Process_temperature_K",
            "Rotational speed [rpm]": "Rotational_speed_rpm",
            "Torque [Nm]": "Torque_Nm",
            "Tool wear [min]": "Tool_wear_min"
        })

        input_xgb = full_input.drop(columns=["Type"]).rename(columns={
            "Air temperature [K]": "Air_temperature_K",
            "Process temperature [K]": "Process_temperature_K",
            "Rotational speed [rpm]": "Rotational_speed_rpm",
            "Torque [Nm]": "Torque_Nm",
            "Tool wear [min]": "Tool_wear_min"
        })

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_bin = cat_model.predict(input_cat)[0]
        prediction_multi = xgb_model.predict(input_xgb)[0]

        # –°–ª–æ–≤–∞—Ä—å –º–µ—Ç–æ–∫
        failure_labels = {
            0: "HDF (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ç–µ–ø–ª–æ–æ—Ç–≤–æ–¥)",
            1: "–ù–µ—Ç –æ—Ç–∫–∞–∑–∞",
            2: "OSF (–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞)",
            3: "PWF (–º–æ—â–Ω–æ—Å—Ç–Ω–æ–π —Å–±–æ–π)",
            4: "RNF (—Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–∫–∞–∑)",
            5: "TWF (–∏–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)"
        }

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–±–∏–Ω–∞—Ä–Ω—ã–π): {'–û—Ç–∫–∞–∑' if prediction_bin == 1 else '–ù–µ—Ç –æ—Ç–∫–∞–∑–∞'}")
        st.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Ç–∏–ø –æ—Ç–∫–∞–∑–∞): {failure_labels.get(prediction_multi, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
